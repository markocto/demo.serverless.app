step "aws-deploy-accept-message-lambda-function" {
    name = "AWS - Deploy Accept Message Lambda Function"

    action {
        notes = <<-EOT
                Runs on **Deploy** and **Redeploy**
                
                Deploys the Accept Message Lambda function for the OctoSubscriber application.
                EOT
        properties = {
            AWS.Lambda.Account = "AWS.Account"
            AWS.Lambda.Description = "Function to accept subscriber messages from an Octopus Server and put them on a queue"
            AWS.Lambda.EnvironmentVariables = "sqsqueue=#{Project.AWS.Queue.Url},sqsregion=#{Project.AWS.Region}"
            AWS.Lambda.FunctionHandler = "index.handler"
            AWS.Lambda.FunctionName = "#{Project.AWS.Lambda.AcceptMessage.FunctionName}"
            AWS.Lambda.FunctionRole = "#{Project.AWS.Lamba.Role.ARN}"
            AWS.Lambda.MemorySize = "128"
            AWS.Lambda.Package = "{\"PackageId\":\"OctoSubscriber-AcceptMessage-Lambda\",\"FeedId\":\"octopus-server-built-in\"}"
            AWS.Lambda.Publish = "Yes"
            AWS.Lambda.Region = "#{Project.AWS.Region}"
            AWS.Lambda.Runtime = "nodejs14.x"
            Octopus.Action.Template.Id = "ActionTemplates-702"
            Octopus.Action.Template.Version = "8"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "aws-worker-pool-tf"

        container {
            feed = "docker-feed-tf"
            image = "octopuslabs/aws-workertools:latest"
        }

        packages "AWS.Lambda.Package" {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = "OctoSubscriber-AcceptMessage-Lambda"
            properties = {
                Extract = "False"
                PackageParameterName = "AWS.Lambda.Package"
                SelectionMode = "deferred"
            }
        }
    }
}

step "aws-deploy-lambda-function-copy" {
    name = "AWS - Deploy Lambda Function Copy"

    action {
        is_disabled = true
        properties = {
            AWS.Lambda.Account = "AWS.Account"
            AWS.Lambda.EnvironmentVariables = "sqsqueue=#{Project.AWS.Queue.Url},sqsregion=#{Project.AWS.Region}"
            AWS.Lambda.FunctionHandler = "index.handler"
            AWS.Lambda.FunctionName = "#{Project.AWS.Lambda.AcceptMessage.FunctionName}"
            AWS.Lambda.FunctionRole = "#{Project.AWS.Lamba.Role.ARN}"
            AWS.Lambda.MemorySize = "128"
            AWS.Lambda.Package = "{\"PackageId\":\"OctoSubscriber-AcceptMessage-Lambda\",\"FeedId\":\"octopus-server-built-in\"}"
            AWS.Lambda.Publish = "Yes"
            AWS.Lambda.Region = "#{AWS.US.Primary.Region}"
            AWS.Lambda.Runtime = "nodejs14.x"
            Octopus.Action.Template.Id = "ActionTemplates-2485"
            Octopus.Action.Template.Version = "5"
        }
        worker_pool = "aws-worker-pool-tf"

        container {
            feed = "docker-feed-tf"
            image = "octopusdeploy/worker-tools:3-ubuntu.18.04"
        }

        packages "AWS.Lambda.Package" {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = "OctoSubscriber-AcceptMessage-Lambda"
            properties = {
                Extract = "False"
                PackageParameterName = "AWS.Lambda.Package"
                SelectionMode = "deferred"
            }
        }
    }
}

step "aws-deploy-process-message-lambda-function" {
    name = "AWS - Deploy Process Message Lambda Function"

    action {
        notes = <<-EOT
                Runs on **Deploy** and **Redeploy**
                
                Deploys the Accept Message Lambda function for the OctoSubscriber application to AWS.
                EOT
        properties = {
            AWS.Lambda.Account = "AWS.Account"
            AWS.Lambda.Description = "Function to accept subscriber messages from an Octopus Server and put them on a queue"
            AWS.Lambda.EnvironmentVariables = "OCTOPUS_SERVER_URL=#{Global.Base.Url},OCTOPUS_API_KEY=#{Global.Api.Key}"
            AWS.Lambda.FunctionHandler = "process_message::process_message.Function::FunctionHandler"
            AWS.Lambda.FunctionName = "#{Project.AWS.Lambda.ProcessMessage.FunctionName}"
            AWS.Lambda.FunctionRole = "#{Project.AWS.Lamba.Role.ARN}"
            AWS.Lambda.FunctionTimeout = "30"
            AWS.Lambda.MemorySize = "128"
            AWS.Lambda.Package = "{\"PackageId\":\"OctoSubscriber-ProcessMessage-Lambda\",\"FeedId\":\"octopus-server-built-in\"}"
            AWS.Lambda.Publish = "Yes"
            AWS.Lambda.Region = "#{Project.AWS.Region}"
            AWS.Lambda.Runtime = "dotnet6"
            Octopus.Action.Template.Id = "ActionTemplates-702"
            Octopus.Action.Template.Version = "8"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "aws-worker-pool-tf"

        container {
            feed = "docker-feed-tf"
            image = "octopuslabs/aws-workertools:latest"
        }

        packages "AWS.Lambda.Package" {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = "OctoSubscriber-ProcessMessage-Lambda"
            properties = {
                Extract = "False"
                PackageParameterName = "AWS.Lambda.Package"
                SelectionMode = "deferred"
            }
        }
    }
}

step "aws-configure-accept-message-lambda-alias" {
    name = "AWS - Configure Accept Message Lambda Alias"

    action {
        notes = <<-EOT
                Runs on **Deploy** and **Rollback**
                
                Updates the Live alias in the Accept Message Lambda function to send a certain traffic percent to the latest version.
                EOT
        properties = {
            AWS.Lambda.Account = "AWS.Account"
            AWS.Lambda.Alias.FunctionVersion = "#{Octopus.Action[AWS - Deploy Accept Message Lambda Function].Output.PublishedVersion}"
            AWS.Lambda.Alias.Name = "Live"
            AWS.Lambda.Alias.Percent = "100"
            AWS.Lambda.Function.Name = "#{Octopus.Action[AWS - Deploy Accept Message Lambda Function].Output.LambdaArn}"
            AWS.Lambda.Region = "#{Project.AWS.Region}"
            Octopus.Action.Template.Id = "ActionTemplates-1862"
            Octopus.Action.Template.Version = "2"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "aws-worker-pool-tf"

        container {
            feed = "docker-feed-tf"
            image = "octopuslabs/aws-workertools:latest"
        }
    }
}

step "aws-configure-process-message-lambda-alias" {
    name = "AWS - Configure Process Message Lambda Alias"

    action {
        notes = <<-EOT
                Runs on **Deploy** and **Rollback**
                
                Updates the Live alias in the Process Message Lambda function to send a certain traffic percent to the latest version.
                EOT
        properties = {
            AWS.Lambda.Account = "AWS.Account"
            AWS.Lambda.Alias.FunctionVersion = "#{Octopus.Action[AWS - Deploy Process Message Lambda Function].Output.PublishedVersion}"
            AWS.Lambda.Alias.Name = "Live"
            AWS.Lambda.Alias.Percent = "100"
            AWS.Lambda.Function.Name = "#{Octopus.Action[AWS - Deploy Process Message Lambda Function].Output.LambdaArn}"
            AWS.Lambda.Region = "#{Project.AWS.Region}"
            Octopus.Action.Template.Id = "ActionTemplates-1862"
            Octopus.Action.Template.Version = "2"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "aws-worker-pool-tf"

        container {
            feed = "docker-feed-tf"
            image = "octopuslabs/aws-workertools:latest"
        }
    }
}

step "aws-configure-lambda-api-gateway-integration" {
    name = "AWS - Configure Lambda API Gateway Integration"

    action {
        notes = <<-EOT
                Runs on **Deploy** and **Rollback**
                
                Creates the API gateway integration if it does not already exist.
                EOT
        properties = {
            AWS.Api.Gateway.Account = "AWS.Account"
            AWS.Api.Gateway.Integration.HttpMethod = "ANY"
            AWS.Api.Gateway.Integration.PayloadFormatVersion = "2.0"
            AWS.Api.Gateway.Lambda.Alias = "Live"
            AWS.Api.Gateway.Lambda.Arn = "#{Octopus.Action[AWS - Deploy Accept Message Lambda Function].Output.LambdaArn}"
            AWS.Api.Gateway.Name = "#{Project.AWS.API.Gateway.Name}"
            AWS.Api.Gateway.Region = "#{Project.AWS.Region}"
            AWS.Api.Gateway.Route.Key = "/octopus/webhook"
            Octopus.Action.Template.Id = "ActionTemplates-1863"
            Octopus.Action.Template.Version = "2"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "aws-worker-pool-tf"

        container {
            feed = "docker-feed-tf"
            image = "octopuslabs/aws-workertools:latest"
        }
    }
}

step "create-function-urls" {
    name = "Create function urls"

    action {
        action_type = "Octopus.AwsRunScript"
        properties = {
            Octopus.Action.Aws.AssumeRole = "False"
            Octopus.Action.Aws.Region = "#{AWS.US.Primary.Region}"
            Octopus.Action.AwsAccount.UseInstanceRole = "False"
            Octopus.Action.AwsAccount.Variable = "AWS.Account"
            Octopus.Action.Script.ScriptBody = <<-EOT
                # Get list of configured urls
                $functionUrls = (aws lambda list-function-url-configs --function-name "#{Project.AWS.Lambda.AcceptMessage.FunctionName}" | ConvertFrom-Json)
                
                if ($functionUrls.FunctionUrlConfigs.Count -eq 0)
                {
                    # Create the accept message function url config
                    Write-Host "#{Project.AWS.Lambda.AcceptMessage.FunctionName} doesn't have a url configured, creating ..."
                	aws lambda create-function-url-config --function-name "#{Project.AWS.Lambda.AcceptMessage.FunctionName}" --auth-type "NONE"
                }   
                
                
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "aws-worker-pool-tf"

        container {
            feed = "docker-feed-tf"
            image = "octopuslabs/aws-workertools"
        }
    }
}